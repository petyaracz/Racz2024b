Dear Janet

I hope all is well in Oxford. I have a long question, but it might be a yes-no question, which would make things easier. I do appreciate your time, I know it is very much a finite resource.

I'm working on replicating the segmental similarity calculator in Frisch, Pierrehumbert, and Broe (2004) for Hungarian with my student Szil치rd T칩th. We want to see whether an analogical model which uses segmental similarity, like the GCM (Albright and Hayes (2003), Dawdy-Hesterberg and Pierrehumbert (2014), R치cz, Beckner, Hay and Pierrehumbert (2020)) or a k-nearest neighbour model would outperform GPT4 on modelling inflectional variation in Hungarian.

For R치cz, Beckner, Hay and Pierrehumbert (2020), the English feature files, the implementation of the segmental similarity calculator, and the GCM already existed, written by Lisa and Adam. So I could make progress with the project by understanding the concept and testing and using Lisa's GCM implementation, which she was kind enough to share during my time at NZILBB and Northwestern.

If I want to apply the similarity calculator to Hungarian, I need to understand exactly how it works. It is true that I should have exactly understood how it works already, but there is a case to be made for using tools we mostly understand (e.g. I couldn't implement a gradient boosting machine at gunpoint).

To build the segmental similarity calculator, I reread the papers I cite above and looked at the perl code written by Lisa / Adam. I think I understand how natural classes are defined. But I'd like to touch base with you to make sure I do, using Frisch, Pierrehumbert, and Broe (2004) as a point of reference.

How are natural classes defined?

The feature specifications from the feature matrix in Frisch, Pierrehumbert, and Broe (2004), p201, are in Table 1. I only show columns for the labial consonants, with 1 == "+" and 0 == "-".

		b	f	m	w
cons	1	1	1	0
son		0	0	1	1
cont	0	1	0	1
acute				
strident				
nasal	0		1		
lateral				
labial	1	1	1	1
coronal				
anterior				
dorsal				
back				
phar				
radical				
voice	1	0	1	1
spglot				
conglot

Table 1. Feature specifications for the labial consonants in Arabic				 

This is an underspecified representation. For example, [acute] is used to distinguish coronal consonants from each other, but it does not play a role in specifying the four labial consonants, so it does not take up a value for these.

To calculate the segmental similarity between two segments, we don't want to count the number of times where two segments have the same feature value. We want to count the number of shared natural classes for the two segments and divide this by the total number of shared and non-shared natural classes.

As Frisch et al (2004) write, "Since OCP effects in Arabic only apply to consonants that share major place of articulation features, we stipulate that the natural classes used in the similarity computations are only those natural classes containing a place of articulation feature." [p198]

They go on to say:

"The pair /f, m/ share 2 such natural classes, namely:

- {b, f, m, w} (the labials)
- {b, f, m} (labial consonants). 

They have 7 non-shared classes:

{b, f} (obstruents), 
{f, w} (continuants), 
{f} (voiceless continuants), 
{b, m, w} (voiced), 
{b, m} (voiced stops), 
{m, w} (voiced sonorants) 
{m} (nasals). 

The similarity of /f, m/ is 2/9 = 0.22." 
[p199, formatting mine]

I repeat Table 1, transposed, omitting the unspecificed features, as Table 2.

	cons	son	cont	nasal	labial	voice
b	1		0	0		0		1		1
f	1		0	1				1		0
m	1		1	0		1		1		1
w	0		1	1				1		1

Table 2. Distinctive features for /b, f, m, w/.

We can use this to specify the natural classes listed above:

Shared classes:

labials: [+labial] {b, f, m, w}
labial consonants: [+cons, +labial] {b, f, m}

Non-shared classes:

[f]: obstruents: [-son] {b, f}
[f]: continuants: [+cont] {f, w}
[f]: voiceless continuants: [+cont, -voice] {f}
[m]: voiced: [+voice] {b, m, w}
[m]: voiced stops: [-cont, +voice] {b, m}
[m]: voiced sonorants: [-son, +voice] {m, w}
[m]: nasals: [+nasal] {m}

Natural classes are defined by 1+ shared distinctive features.

We get to the natural classes by considering how the different feature combinations define bundles of segments, where a bundle can consist of a single segment. Given the stipulation above, we do this for places of articulation separately, meaning we only consider /b, f, m, w/.

The possible bundles of segments including /f, m/ are:

{f} voiceless continuants
{m} voiced
{b, f} obstruents
{f, w} continuants
{b, m} voiced stops
{m, w} voiced sonorants
{b, f, m} labial consonants
{b, f, m, w} labials

as well as:

*{f, m}
*{b, f, w}
*{b, m, w}
*{f, m, w}

But the last four bundles don't exist, because they are not the largest natural classes uniquely defined by any combination of feature specifications. I mark this by using an agrammaticality asterisk. Take *{f, m}: 

	cons	son	cont	nasal	labial	voice
f	1		0	1				1		0
m	1		1	0		1		1		1

They are both [+labial, +cons], but the possible natural classes here are {b, f, m, w} and {b, f, m}. So {f, m} is not a natural class in and of itself.

The paper's second example is [b,f].

"
The pair /b, f/ share 3 classes,

{b, f, m, w}, 
{b, f, m}
{b, f}.

They have 5 non-shared classes: 

{f, w}, 
{b, m, w}, 
{b, m}, 
{b, w}, 
{b}.
" 
[p199 formatting mine]

To follow the logic in the previous case, the reason why, for instance, {f, m} is not listed as a non-shared natural class is that it is not a natural class.

Taken together, this means that the algorithm for establishing segmental similarity is this:

1. Take two segments, A and B.
2. For each segment, list natural classes for that segment.
3. A natural class is the largest possible combination of segments that share at least one feature specification. Natural classes are not counted twice (if a natural class is the proper subset of a larger natural class, we don't count it)
4. Count number of overlapping natural classes for A and for B.
5. Count number of non-overlapping natural classes for A as well as for B.
6. Calculate number of overlapping / number of all overlapping and non-overlapping natural classes to get segmental similarity.

Did I get this one right?

Many thanks for your time, I really appreciate it.
All the best
Peter

